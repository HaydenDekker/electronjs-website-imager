FROM ubuntu

ENV BASE_DIR_IMAGES=/app/images
ENV IMAGER_PORT=8080
ENV NVM_DIR=/usr/local/.nvm
ENV NODE_VERSION=20.10.0

COPY ./20-dummy.conf /etc/X11/xorg.conf.d/

RUN apt-get update && apt-get install -y curl

RUN mkdir -p /usr/local/.nvm

# Install NVM
RUN curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash

# Source NVM and install the specified Node.js version
RUN . "$NVM_DIR/nvm.sh" && . "$NVM_DIR/bash_completion" && nvm install $NODE_VERSION && nvm use $NODE_VERSION

RUN echo $(ls $NVM_DIR/versions/node)

ENV NODE_PATH $NVM_DIR/versions/node/v$NODE_VERSION/lib/node_modules
ENV PATH      $NVM_DIR/versions/node/v$NODE_VERSION/bin:$PATH

RUN ls -la $NVM_DIR/versions/node/v$NODE_VERSION/bin

RUN node -v
RUN npm -v

RUN apt-get install -y build-essential clang libdbus-1-dev libgtk-3-dev \
                       libnotify-dev libasound2-dev libcap-dev \
                       libcups2-dev libxtst-dev \
                       libxss1 libnss3-dev gcc-arm-linux-gnueabihf curl \
                       gperf bison python3-dbusmock openjdk-8-jre

ENV DEBIAN_FRONTEND=noninteractive
RUN apt update && apt install -y
RUN apt install -y xserver-xorg-video-dummy

# TODO see if this is easier to get the docker xorg up
# https://github.com/mviereck/x11docker

ENV DISPLAY=:3
COPY startx /usr/local/bin
RUN chmod +x /usr/local/bin/startx

# Copy in application
RUN mkdir /usr/local/bin/website-imager
RUN mkdir /usr/local/bin/website-imager/dist
RUN mkdir /usr/local/bin/website-imager/node_modules

COPY app/dist /usr/local/bin/website-imager/dist
COPY app/node_modules /usr/local/bin/website-imager/node_modules
COPY app/package.json /usr/local/bin/website-imager

VOLUME /app
# Better way to manage this....
RUN mkdir -p /app/images

# Install app and fix binaries
ENV NVM_DIR=/usr/local/.nvm
ENV NODE_PATH=$NVM_DIR/versions/node/v$NODE_VERSION/lib/node_modules
ENV PATH=$NVM_DIR/versions/node/v$NODE_VERSION/bin:$PATH
WORKDIR /usr/local/bin/website-imager
RUN npm rebuild
RUN npm install

RUN groupadd -g 1020 appg
RUN useradd -u 1020 -g appg -m -s /bin/bash appu
RUN chown appu:appg /usr/local/bin/startx

# Allow user to execute application
RUN chown -R appu:appg /usr/local/bin/website-imager
# electron needs these permissions set to run in non-privelaged docker container.
RUN chown root /usr/local/bin/website-imager/node_modules/electron/dist/chrome-sandbox
RUN chmod 4755 /usr/local/bin/website-imager/node_modules/electron/dist/chrome-sandbox

USER appu
RUN ls -la /usr/local/bin/

ENV NVM_DIR=/usr/local/.nvm
ENV NODE_PATH=$NVM_DIR/versions/node/v$NODE_VERSION/lib/node_modules
ENV PATH=$NVM_DIR/versions/node/v$NODE_VERSION/bin:$PATH

CMD ["/usr/local/bin/startx"]